name: NexusCMS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  laravel-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: nexus_cms_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, fileinfo, mysql
        coverage: xdebug

    - uses: actions/checkout@v3

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install Composer Dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: nexus_cms_test
        DB_USERNAME: root
        DB_PASSWORD: password
      run: vendor/bin/phpunit

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        tools: phpcs, phpmd, phpcpd, phpstan
    
    - name: Install dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
    
    - name: Run PHP CodeSniffer
      run: phpcs --standard=PSR12 app
    
    - name: Run PHP Mess Detector
      run: phpmd app text cleancode,codesize,controversial,design,naming,unusedcode
    
  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Run linter
      run: npm run lint
    
    - name: Run frontend tests
      run: npm test

  deploy:
    needs: [laravel-tests, code-quality, frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
    
    - name: Install dependencies
      run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist --optimize-autoloader --no-dev
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    # Aquí puedes añadir los pasos para desplegar a tu servidor
    # Por ejemplo, usando FTP, SSH, o servicios como Laravel Forge, Envoyer, etc.
    
    - name: Deploy to production
      run: echo "Despliegue a producción completado"
      # Reemplaza esta línea con tu estrategia de despliegue real